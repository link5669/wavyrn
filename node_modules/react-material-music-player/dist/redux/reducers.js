"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _types = require("./types");
function mediaState() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _types.MediaState.STOPPED;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case _types.ActionTypes.PLAY:
      return _types.MediaState.PLAYING;
    case _types.ActionTypes.PAUSE:
      return _types.MediaState.PAUSED;
    case _types.ActionTypes.STOP:
      return _types.MediaState.STOPPED;
    default:
      return state;
  }
}
function playlist() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new _types.Track("", "", "", "", "")];
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.UPDATE_PLAYLIST) return action.payload.playlist;else return state;
}
function currentTrack() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.CHANGE_TRACK) return action.payload.index;else return state;
}
function shuffled() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SHUFFLE) return action.payload.shuffle;else return state;
}
function currentTime() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_CURRENT_TIME) return action.payload.currentTime;else return state;
}
function timeLeft() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_TIME_LEFT) return action.payload.timeLeft;else return state;
}
function volume() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.CHANGE_VOLUME) return action.payload.volume;else return state;
}
function repeatMode() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _types.RepeatMode.NORMAL;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _types.ActionTypes.SET_REPEAT_MODE) return action.payload.mode;else return state;
}
var _default = exports.default = (0, _redux.combineReducers)({
  mediaState,
  playlist,
  currentTrack,
  shuffled,
  currentTime,
  timeLeft,
  volume,
  repeatMode
});