/**
 * - State object
 */
export type State = {
    /**
     * - Media state
     */
    mediaState: MediaState;
    /**
     * - Current time in seconds
     */
    currentTrack: number;
    /**
     * - Boolean representation of whether playlist is shuffled or not
     */
    shuffled: boolean;
    /**
     * - Array of tracks supplied to player
     */
    playlist: Array<Track>;
    /**
     * - Current progress in seconds
     */
    currentTime: number;
    /**
     * - Time left to end play in seconds
     */
    timeLeft: number;
    /**
     * - Volme level
     */
    volume: number;
    /**
     * - Repeat mode
     */
    repeatMode: RepeatMode;
};
/**
 * Call back for useSelect hook
 */
export type useSelectCb = (state: State) => any;
/**
 * Store action types
 */
export type ActionTypes = string;
export namespace ActionTypes {
    const CHANGE_TRACK: string;
    const PLAY: string;
    const PAUSE: string;
    const STOP: string;
    const SHUFFLE: string;
    const UPDATE_PLAYLIST: string;
    const CHANGE_VOLUME: string;
    const SET_START_TIME: string;
    const SET_STOP_TIME: string;
    const SET_CURRENT_TIME: string;
    const SET_TIME_LEFT: string;
    const SEEK: string;
    const SET_REPEAT_MODE: string;
    const SKIP_NEXT: string;
    const SKIP_PREV: string;
}
/** Call back for useSelect hook
 * @callback useSelectCb
 * @param {State} state
 */
/**
 * Audio output model
 * @class
 * @extends {Audio}
 */
export class AudioOutput extends HTMLAudioElement {
    constructor();
    /**@private */
    private track;
    /**
     * Sets source of audio
     * @param {Track} track
     */
    setSrc(track: Track): void;
    setMediaMetadata(track: any): void;
    /**
     * Unsets audio can be used to stop play
     */
    clear(): void;
    /**
     * Check if same track loaded
     * @param {Track} track
     * @returns {boolean}
     */
    isCurrent(track: Track): boolean;
}
/**
 * Custom native events for module level interface
 */
export type CustomNativeEventTypes = string;
export namespace CustomNativeEventTypes {
    const PLAY_1: string;
    export { PLAY_1 as PLAY };
    const PAUSE_1: string;
    export { PAUSE_1 as PAUSE };
    const STOP_1: string;
    export { STOP_1 as STOP };
    export const SET_VOLUME: string;
    const SKIP_NEXT_1: string;
    export { SKIP_NEXT_1 as SKIP_NEXT };
    const SKIP_PREV_1: string;
    export { SKIP_PREV_1 as SKIP_PREV };
    const SHUFFLE_1: string;
    export { SHUFFLE_1 as SHUFFLE };
    const SEEK_1: string;
    export { SEEK_1 as SEEK };
    const SET_REPEAT_MODE_1: string;
    export { SET_REPEAT_MODE_1 as SET_REPEAT_MODE };
    const CHANGE_TRACK_1: string;
    export { CHANGE_TRACK_1 as CHANGE_TRACK };
    export const PLAY_LATER: string;
    export const PLAY_NEXT: string;
    export const SET_PLAYLIST: string;
    export const CLEAR_PLAYLIST: string;
}
/**
 * Media states
 */
export type MediaState = string;
export namespace MediaState {
    const STOPPED: string;
    const PLAYING: string;
    const PAUSED: string;
}
/**
 * Repeat modes
 */
export type RepeatMode = string;
export namespace RepeatMode {
    const NORMAL: string;
    const REPEAT_ALL: string;
    const REPEAT_ONE: string;
}
/**
 * This contains all data needed for a song
 * @constructor
 * @param {!string} trackID - Unique identifier used in sorting after shuffle
 * @param {!string} coverArt -  URL to cover art image
 * @param {!string} title
 * @param {!string} artist
 * @param {!string} source - URL to music file
 */
export function Track(trackID: string, coverArt: string, title: string, artist: string, source: string): void;
export class Track {
    /**
     * This contains all data needed for a song
     * @constructor
     * @param {!string} trackID - Unique identifier used in sorting after shuffle
     * @param {!string} coverArt -  URL to cover art image
     * @param {!string} title
     * @param {!string} artist
     * @param {!string} source - URL to music file
     */
    constructor(trackID: string, coverArt: string, title: string, artist: string, source: string);
    /** @readonly*/
    readonly ID: string;
    /** @readonly*/
    readonly coverArt: string;
    /**@readonly */
    readonly title: string;
    /**@readonly */
    readonly artist: string;
    /** @readonly*/
    readonly source: string;
    getSource: () => string;
}
