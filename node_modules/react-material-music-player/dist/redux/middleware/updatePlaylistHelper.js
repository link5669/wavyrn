"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _actionCreators = _interopRequireDefault(require("../actionCreators.js"));
var _types = require("../types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const updatePlaylistHelper = store => {
  return next => action => {
    if (action.type !== _types.ActionTypes.UPDATE_PLAYLIST) return next(action);

    // store prev playlist and new playlist
    const {
      playlist,
      currentTrack
    } = store.getState();
    const newPlaylist = action.payload.playlist;

    // update state with new playlist
    const result = next(action);

    // check if playlist changed
    let playlistChanged = false;
    if (newPlaylist.length !== playlist.length) playlistChanged = true;else for (let i = 0; i < playlist.length; i++) {
      var _newPlaylist$i, _playlist$i;
      if (((_newPlaylist$i = newPlaylist[i]) === null || _newPlaylist$i === void 0 ? void 0 : _newPlaylist$i.ID) !== ((_playlist$i = playlist[i]) === null || _playlist$i === void 0 ? void 0 : _playlist$i.ID)) {
        playlistChanged = true;
        break;
      }
    }

    // if playlist changed look for current track
    if (playlistChanged) {
      let newCurrentTrack = -1;
      for (let i = 0; i < newPlaylist.length; i++) {
        var _newPlaylist$i2, _playlist$currentTrac;
        if (((_newPlaylist$i2 = newPlaylist[i]) === null || _newPlaylist$i2 === void 0 ? void 0 : _newPlaylist$i2.ID) === ((_playlist$currentTrac = playlist[currentTrack]) === null || _playlist$currentTrac === void 0 ? void 0 : _playlist$currentTrac.ID)) {
          newCurrentTrack = i;
          break;
        }
      }

      // if not found then its completely playlist, update current track to 0
      if (newCurrentTrack === -1) store.dispatch(_actionCreators.default.changeTrack(0));else store.dispatch(_actionCreators.default.changeTrack(newCurrentTrack)); // else update current track
    }

    return result;
  };
};
var _default = exports.default = updatePlaylistHelper;