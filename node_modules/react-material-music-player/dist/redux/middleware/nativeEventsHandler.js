"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eventHandler;
var _actionCreators = _interopRequireDefault(require("../actionCreators.js"));
var _types = require("../types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function eventHandler(store) {
  let clearPlaylist = () => {
    store.dispatch(_actionCreators.default.stop());
    store.dispatch(_actionCreators.default.changeTrack(0));
    store.dispatch(_actionCreators.default.updatePlaylist([]));
  };
  window.addEventListener(_types.CustomNativeEventTypes.PLAY, function (e) {
    let playlist = /**@type {CustomEvent}*/e.detail;
    if (!playlist) {
      store.dispatch(_actionCreators.default.play());
      return;
    } else if (playlist.length >= 1) {
      clearPlaylist();
      store.dispatch(_actionCreators.default.updatePlaylist(playlist));
      store.dispatch(_actionCreators.default.play());
    }
  });
  window.addEventListener(_types.CustomNativeEventTypes.PAUSE, function (e) {
    store.dispatch(_actionCreators.default.pause());
  });
  window.addEventListener(_types.CustomNativeEventTypes.STOP, function (e) {
    store.dispatch(_actionCreators.default.stop());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_VOLUME, function (e) {
    let level = /** @type {CustomEvent} */e.detail; //typescript cast Event to CustomEvent
    if (level >= 0 || level <= 100) store.dispatch(_actionCreators.default.setVolume(level));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SKIP_NEXT, function (e) {
    store.dispatch(_actionCreators.default.skipNext());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SKIP_PREV, function (e) {
    store.dispatch(_actionCreators.default.skipPrev());
  });
  window.addEventListener(_types.CustomNativeEventTypes.SHUFFLE, function (e) {
    let bool = /** @type {CustomEvent} */e.detail; //typescript cast Event to CustomEvent
    store.dispatch(_actionCreators.default.shuffle(bool));
  });
  window.addEventListener(_types.CustomNativeEventTypes.CHANGE_TRACK, function (e) {
    let index = /**@type {CustomEvent}*/e.detail;
    store.dispatch(_actionCreators.default.changeTrack(index));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_PLAYLIST, function (e) {
    let playlist = /**@type {CustomEvent}*/e.detail;
    if (playlist < 1) clearPlaylist();else store.dispatch(_actionCreators.default.updatePlaylist(playlist));
  });
  window.addEventListener(_types.CustomNativeEventTypes.CLEAR_PLAYLIST, function (e) {
    clearPlaylist();
  });
  window.addEventListener(_types.CustomNativeEventTypes.SEEK, function (e) {
    let progress = /**@type {CustomEvent}*/e.detail;
    if (progress > 100 || progress < 0) return;
    store.dispatch(_actionCreators.default.seek(progress));
  });
  window.addEventListener(_types.CustomNativeEventTypes.SET_REPEAT_MODE, function (e) {
    store.dispatch(_actionCreators.default.setRepeatMode( /**@type {CustomEvent}*/e.detail));
  });
  let playNextOrLaterHandler = e => {
    let currentPlaylist = store.getState().playlist;
    let currentTrack = store.getState().currentTrack;
    let newPlaylist = [];
    if (e.type === _types.CustomNativeEventTypes.PLAY_NEXT) newPlaylist = currentPlaylist.reduce((accumulator, currentValue, index) => {
      if (index === currentTrack) return [...accumulator, currentValue, ...e.detail];else return [...accumulator, currentValue];
    }, []);else if (e.type === _types.CustomNativeEventTypes.PLAY_LATER) {
      newPlaylist = currentPlaylist.concat(e.detail);
    }
    store.dispatch(_actionCreators.default.updatePlaylist(newPlaylist));
  };
  window.addEventListener(_types.CustomNativeEventTypes.PLAY_NEXT, playNextOrLaterHandler);
  window.addEventListener(_types.CustomNativeEventTypes.PLAY_LATER, playNextOrLaterHandler);
  return next => action => {
    return next(action);
  };
}