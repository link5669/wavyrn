export default interfaceObject;
export type Track = import("./redux/types").Track;
export type RepeatMode = import("./redux/types").RepeatMode;
declare namespace interfaceObject {
    export { play };
    export { pause };
    export { stop };
    export { setVolume };
    export { skipNext };
    export { skipPrev };
    export { shuffle };
    export { seek };
    export { setRepeatMode };
    export { changeTrack };
    export { playNext };
    export { playLater };
    export { setPlaylist };
    export { clearPlaylist };
    export { getState };
    export { subscribe };
}
/**  @typedef {import("./redux/types").Track} Track */
/**
 * This sets new playlist and starts playing
 * @param {?Track[]} playlist - Array of Tracks to play
 */
declare function play(playlist: Track[] | null): void;
/**
 * This pauses the current track
 */
declare function pause(): void;
/**
 * This stops the audio player element
 */
declare function stop(): void;
/**
 * This changes volume level
 * @param {number} level - Number from 0 to 100
 */
declare function setVolume(level: number): void;
/**
 * This skips to next track in playlist
 */
declare function skipNext(): void;
/**
 * This skips to previous track in playlist
 */
declare function skipPrev(): void;
/**
 * This shuffles playlist
 * @param {boolean} bool - true|false
 */
declare function shuffle(bool: boolean): void;
/**
 * This seeks through current track
 * @param {number} progress - Number 0 to 100 as percentage of total track time
 */
declare function seek(progress: number): void;
/**  @typedef {import("./redux/types").RepeatMode} RepeatMode */
/**
 * This sets repeat mode
 * @param {RepeatMode} mode - One of three strings "NORMAL"|"REPEAT_ALL"|"REPEAT_ONE".
 */
declare function setRepeatMode(mode: RepeatMode): void;
/**
 * This changes track to specified index
 * @param {number} index - Index of track to jump to.
 */
declare function changeTrack(index: number): void;
/**
 * This inserts playlist right after current playing track
 * @param {Track[]} playlist - Array of Tracks to insert
 */
declare function playNext(playlist: Track[]): void;
/**
 * This appends playlist to the end of current playlist
 * @param {Track[]} playlist - Array of Tracks to append
 */
declare function playLater(playlist: Track[]): void;
/**
 * This sets new playlist
 * @param {Track[]} playlist - Array of Tracks to set
 */
declare function setPlaylist(playlist: Track[]): void;
/**
 * This clears all tracks
 */
declare function clearPlaylist(): void;
/**
 * Returns the full state of player
 * @returns {import("./redux/types").State}
 */
declare function getState(): import("./redux/types").State;
/**
 * Listens for changes
 * @param {Function} func - function
 */
declare function subscribe(func: Function): void;
