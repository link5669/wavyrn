"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ProgressBar;
var _Box2 = _interopRequireDefault(require("@mui/material/Box"));
var _Slider2 = _interopRequireDefault(require("@mui/material/Slider"));
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _actionCreators = _interopRequireDefault(require("../redux/actionCreators.js"));
var _Typography = _interopRequireDefault(require("@mui/material/Typography"));
var _secondsToString = _interopRequireDefault(require("../utils/secondsToString.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ProgressBar(props) {
  const sx = props.sx;
  const {
    timeLeft,
    currentTime
  } = (0, _reactRedux.useSelector)( /**@type {import("../redux/types.js").useSelectCb} */
  _ref => {
    let {
      timeLeft,
      currentTime
    } = _ref;
    return {
      timeLeft,
      currentTime
    };
  }, _reactRedux.shallowEqual);

  // NaN on division by zero
  const progress = currentTime / (timeLeft + currentTime) * 100 || 0;
  const dispatch = (0, _reactRedux.useDispatch)();
  const onSeek = progress => dispatch(_actionCreators.default.seek(progress));
  const handleSliderChange = (event, newValue) => {
    onSeek(newValue);
  };
  return /*#__PURE__*/_react.default.createElement(_Box2.default, {
    sx: {
      display: "flex",
      flexDirection: "row",
      wrap: "nowrap",
      alignItems: "center",
      "& > .children": {
        mx: 1
      },
      ...sx
    }
  }, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: "children"
  }, (0, _secondsToString.default)(currentTime)), /*#__PURE__*/_react.default.createElement(_Slider2.default, {
    className: "children",
    "aria-labelledby": "continuous-slider",
    value: progress,
    onChange: handleSliderChange
  }), /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: "children"
  }, (0, _secondsToString.default)(timeLeft)));
}