"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Player;
var _SwipeableDrawer2 = _interopRequireDefault(require("@mui/material/SwipeableDrawer"));
var _Box2 = _interopRequireDefault(require("@mui/material/Box"));
var _Paper2 = _interopRequireDefault(require("@mui/material/Paper"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _styles = require("@mui/material/styles");
var _lodash = _interopRequireDefault(require("lodash.debounce"));
var _CoverArt = _interopRequireDefault(require("./CoverArt.js"));
var _TrackDetials = _interopRequireDefault(require("./TrackDetials.js"));
var _ProgressBar = _interopRequireDefault(require("./ProgressBar.js"));
var _Controls = _interopRequireDefault(require("./Controls.js"));
var _VolumeControl = _interopRequireDefault(require("./VolumeControl.js"));
var _PlaylistControl = _interopRequireDefault(require("./Playlist/PlaylistControl.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PREFIX = "Player";
const RootPaper = (0, _styles.styled)(_Paper2.default)(_ref => {
  let {
    theme
  } = _ref;
  return {
    width: "100vw",
    // positioning
    position: "fixed",
    bottom: 0,
    // prevent screen size overflow by making padding part of dimensions
    boxSizing: "border-box",
    borderRadius: "".concat(theme.shape.borderRadius, " ").concat(theme.shape.borderRadius, " 0 0"),
    // only pad left and right; top padding too much
    paddingRight: theme.spacing(1),
    paddingLeft: theme.spacing(1),
    // incase of overflow in undocked mode
    overflow: "hidden",
    transition: theme.transitions.create(["all"])
  };
});
const SwipeableDrawerRoot = (0, _styles.styled)(_Box2.default)(_ref2 => {
  let {
    theme
  } = _ref2;
  return {
    // fixed size root for swipeable
    // width including padding
    // boxSizing: "border-box",
    height: "80vh",
    marginTop: theme.spacing(6),
    padding: theme.spacing(1),
    overflow: "hidden",
    // puller to be positioned middle of the parent's border
    ["& > .".concat(PREFIX, "-swipeable-puller")]: {
      width: 30,
      height: theme.spacing(1),
      backgroundColor: theme.palette.action.disabled,
      // button color
      borderRadius: 3,
      // position
      position: "absolute",
      top: theme.spacing(3),
      // center in parent border
      left: "calc(50% - 15px)" // center horizontally
    }
  };
});

const RowBox = (0, _styles.styled)(_Box2.default)(() => ({
  display: "flex",
  flexDirection: "row",
  justifyContent: "space-between",
  alignItems: "center",
  flexWrap: "nowrap"
}));
const ColumnBox = (0, _styles.styled)(_Box2.default)(() => ({
  // fill swipeable drawer root
  width: "100%",
  height: "100%",
  // flexbox
  display: "flex",
  flexDirection: "column",
  justifyContent: "end",
  alignItems: "stretch",
  flexWrap: "nowrap"
}));

// box center child
const CenterChildBox = (0, _styles.styled)(_Box2.default)(() => ({
  // flexbox
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "nowrap"
}));
function Player(props) {
  const sx = props.sx;
  const disableDrawer = props.disableDrawer;
  const defaultArt = props.defaultArt;
  const theme = (0, _styles.useTheme)();
  const [maximised, setMaximised] = (0, _react.useState)(false);
  const [width, setWidth] = (0, _react.useState)(window.innerWidth);
  const {
    currentTrack,
    playlist
  } = (0, _reactRedux.useSelector)( /** @type {import("../redux/types.js").useSelectCb} */
  _ref3 => {
    let {
      currentTrack,
      playlist
    } = _ref3;
    return {
      currentTrack,
      playlist
    };
  }, _reactRedux.shallowEqual);
  const openSwipeableDrawer = () => {
    // only maximise if docked and not large
    if (!disableDrawer && width < theme.breakpoints.values.md) {
      setMaximised(true);
    }
  };
  const closeSwipeableDrawer = () => {
    // only close if its maximised
    if (maximised) {
      setMaximised(false);
    }
  };
  const rowView = () => {
    var _playlist$currentTrac, _playlist$currentTrac2;
    return /*#__PURE__*/_react.default.createElement(RowBox, {
      onClick: openSwipeableDrawer
    }, /*#__PURE__*/_react.default.createElement(_CoverArt.default, {
      src: (_playlist$currentTrac = (_playlist$currentTrac2 = playlist[currentTrack]) === null || _playlist$currentTrac2 === void 0 ? void 0 : _playlist$currentTrac2.coverArt) !== null && _playlist$currentTrac !== void 0 ? _playlist$currentTrac : defaultArt,
      sx: {
        height: "48px",
        width: "48px",
        flexShrink: 0
      }
    }), /*#__PURE__*/_react.default.createElement(_TrackDetials.default, {
      sx: {
        // fixed size to stop resize on content change
        width: "120px",
        flexGrow: 1,
        textAlign: "left",
        margin: 1,
        flexShrink: 0
      }
    }), /*#__PURE__*/_react.default.createElement(_Controls.default, {
      disabled: playlist[currentTrack] === undefined,
      isSmall: width <= theme.breakpoints.values.sm
    }), width > theme.breakpoints.values.md && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      sx: {
        flexGrow: 6
      }
    }), /*#__PURE__*/_react.default.createElement(_VolumeControl.default, {
      sx: {
        flexGrow: 2
      }
    }), /*#__PURE__*/_react.default.createElement(_PlaylistControl.default, {
      playlistViewMode: "popover"
    })));
  };
  const columnView = () => {
    var _playlist$currentTrac3, _playlist$currentTrac4;
    return /*#__PURE__*/_react.default.createElement(ColumnBox, null, /*#__PURE__*/_react.default.createElement(CenterChildBox, {
      sx: {
        flexGrow: 1
      }
    }, /*#__PURE__*/_react.default.createElement(_CoverArt.default, {
      className: "children",
      src: (_playlist$currentTrac3 = (_playlist$currentTrac4 = playlist[currentTrack]) === null || _playlist$currentTrac4 === void 0 ? void 0 : _playlist$currentTrac4.coverArt) !== null && _playlist$currentTrac3 !== void 0 ? _playlist$currentTrac3 : defaultArt,
      sx: {
        height: "300px",
        width: "300px",
        boxShadow: 4
      }
    }), /*#__PURE__*/_react.default.createElement(_TrackDetials.default, {
      sx: {
        mt: 1,
        textAlign: "center"
      }
    })), /*#__PURE__*/_react.default.createElement(_ProgressBar.default, null), /*#__PURE__*/_react.default.createElement(_Controls.default, {
      disabled: playlist[currentTrack] === undefined
    }), /*#__PURE__*/_react.default.createElement(_VolumeControl.default, null), /*#__PURE__*/_react.default.createElement(_PlaylistControl.default, {
      playlistViewMode: "expand"
    }));
  };

  // set large depending on player width
  const rootRef = _react.default.useRef();
  const widthSetter = (0, _lodash.default)(() => {
    var _rootElement$clientWi;
    /**
     * Root of the player
     * @type {Element}
     * */
    const rootElement = rootRef.current;
    setWidth((_rootElement$clientWi = rootElement.clientWidth) !== null && _rootElement$clientWi !== void 0 ? _rootElement$clientWi : width);
  }, 250, {
    maxWait: 1000
  });

  // windows resize listener
  (0, _react.useEffect)(() => {
    widthSetter();
    window.addEventListener("resize", widthSetter);
    // eslint-disable-next-line
  }, []);

  // after every render
  (0, _react.useEffect)(() => {
    widthSetter();
  });

  // close maximised drawer when view port gets large
  (0, _react.useEffect)(() => {
    if (width > theme.breakpoints.values.lg) setMaximised(false);
    // eslint-disable-next-line
  }, [width]);
  return (
    /*#__PURE__*/
    // sx from props can be used to override default styles in rowView
    _react.default.createElement(RootPaper, {
      ref: rootRef,
      sx: sx,
      elevation: 4
    }, maximised ? null : rowView(), !disableDrawer && width <= theme.breakpoints.values.md && /*#__PURE__*/_react.default.createElement(_SwipeableDrawer2.default, {
      open: maximised,
      anchor: "bottom",
      onClose: closeSwipeableDrawer,
      onOpen: openSwipeableDrawer
    }, /*#__PURE__*/_react.default.createElement(SwipeableDrawerRoot, null, /*#__PURE__*/_react.default.createElement(_Box2.default, {
      className: "".concat(PREFIX, "-swipeable-puller"),
      onClick: closeSwipeableDrawer
    }), columnView())))
  );
}