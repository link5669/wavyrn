import {
  require_react
} from "./chunk-YZZKIYU7.js";
import {
  __toESM
} from "./chunk-LQ2VYIYD.js";

// node_modules/reaplay/dist/index.modern.js
var import_react = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var ConvertTimeToText = function ConvertTimeToText2(time) {
  if (!time)
    time = 0;
  var minutes = "0" + Math.floor(time / 60);
  var seconds = "0" + Math.floor(time - parseInt(minutes) * 60);
  var result = minutes.substr(-2) + ":" + seconds.substr(-2);
  return result;
};
var Reaplay = function Reaplay2(_ref) {
  var tracks = _ref.tracks, _ref$startIndex = _ref.startIndex, startIndex = _ref$startIndex === void 0 ? 0 : _ref$startIndex, children = _ref.children;
  if (startIndex < 0 || startIndex > tracks.length) {
    startIndex = 0;
  }
  var _useState = (0, import_react.useState)(startIndex), trackIndex = _useState[0], setTrackIndex = _useState[1];
  var _useState2 = (0, import_react.useState)(0), trackProgress = _useState2[0], setTrackProgress = _useState2[1];
  var _useState3 = (0, import_react.useState)(100), volume = _useState3[0], setVolume = _useState3[1];
  var _useState4 = (0, import_react.useState)(1), speed = _useState4[0], setSpeed = _useState4[1];
  var _useState5 = (0, import_react.useState)(false), isPlaying = _useState5[0], setIsPlaying = _useState5[1];
  var _useState6 = (0, import_react.useState)(false), isRepeat = _useState6[0], setIsRepeat = _useState6[1];
  var _useState7 = (0, import_react.useState)(false), isStopPlayMoreSong = _useState7[0], StopPlayMoreSong = _useState7[1];
  var _useState8 = (0, import_react.useState)(false), isShuffleList = _useState8[0], setIsShuffleList = _useState8[1];
  var _useState9 = (0, import_react.useState)(false), isMute = _useState9[0], setIsMute = _useState9[1];
  var _useState10 = (0, import_react.useState)(0), buffered = _useState10[0], setBuffered = _useState10[1];
  var _useState11 = (0, import_react.useState)(true), isLoading = _useState11[0], setIsLoading = _useState11[1];
  var _useState12 = (0, import_react.useState)(false), isHaveError = _useState12[0], setIsHaveError = _useState12[1];
  var _useState13 = (0, import_react.useState)(0), forcePlayerUpdate = _useState13[0], setForcePlayerUpdate = _useState13[1];
  var audioRef = (0, import_react.useRef)(new Audio(tracks[trackIndex]));
  audioRef.current.autoplay = false;
  audioRef.current.volume = volume / 100;
  audioRef.current.muted = isMute;
  audioRef.current.playbackRate = speed;
  audioRef.current.onloadeddata = function() {
    return setIsLoading(false);
  };
  audioRef.current.onerror = function() {
    return setIsHaveError(true);
  };
  var intervalRef = (0, import_react.useRef)(null);
  var isReady = (0, import_react.useRef)(false);
  var duration = audioRef.current.duration;
  var currentPercentage = duration ? trackProgress / duration * 100 + "%" : "0%";
  var trackStyling = "\n      -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(" + currentPercentage + ", #fff), color-stop(" + currentPercentage + ", #777))\n    ";
  var startTimer = function startTimer2() {
    clearInterval(intervalRef.current);
    intervalRef.current = setInterval(function() {
      if (audioRef.current.ended) {
        if (!isStopPlayMoreSong) {
          if (isShuffleList) {
            playRandom();
          } else {
            if (isRepeat) {
              onScrub(0);
              audioRef.current.play();
            } else {
              toNextTrack();
            }
          }
        }
      } else {
        setTrackProgress(audioRef.current.currentTime);
      }
    }, 1e3);
  };
  var onScrub = function onScrub2(value) {
    clearInterval(intervalRef.current);
    audioRef.current.currentTime = value;
    setTrackProgress(audioRef.current.currentTime);
  };
  var play = function play2() {
    setIsPlaying(true);
  };
  var pause = function pause2() {
    setIsPlaying(false);
  };
  var onScrubEnd = function onScrubEnd2() {
    if (!isPlaying) {
      setIsPlaying(true);
    }
    startTimer();
  };
  var toPrevTrack = function toPrevTrack2() {
    if (isShuffleList) {
      playRandom();
    } else {
      if (trackIndex - 1 < 0) {
        setTrackIndex(tracks.length - 1);
      } else {
        setTrackIndex(trackIndex - 1);
      }
    }
  };
  var toNextTrack = function toNextTrack2() {
    if (isShuffleList) {
      playRandom();
    } else {
      if (trackIndex < tracks.length - 1) {
        setTrackIndex(trackIndex + 1);
      } else {
        setTrackIndex(0);
      }
    }
  };
  var forward = function forward2() {
    audioRef.current.currentTime += 5;
  };
  var backward = function backward2() {
    audioRef.current.currentTime -= 5;
  };
  var playSlow = function playSlow2() {
    setSpeed(0.5);
  };
  var playNormal = function playNormal2() {
    setSpeed(1);
  };
  var playFast = function playFast2() {
    setSpeed(2);
  };
  var repeat = function repeat2(SetOnRepeat) {
    if (SetOnRepeat) {
      setIsRepeat(true);
    } else {
      setIsRepeat(false);
    }
  };
  var mute = function mute2() {
    setIsMute(true);
  };
  var unmute = function unmute2() {
    setIsMute(false);
  };
  var playShuffle = function playShuffle2(shuffle) {
    if (shuffle) {
      setIsShuffleList(true);
    } else {
      setIsShuffleList(false);
    }
  };
  var playRandom = function playRandom2() {
    var songsLength = tracks.length - 1;
    var random = Math.floor(Math.random() * songsLength);
    setTrackIndex(random);
  };
  var forceUpdatePlayer = function forceUpdatePlayer2() {
    setForcePlayerUpdate(function(prev) {
      return prev + 1;
    });
  };
  var update = function update2() {
    onScrubEnd();
  };
  (0, import_react.useEffect)(function() {
    if (isPlaying) {
      audioRef.current.play();
      startTimer();
    } else {
      audioRef.current.pause();
    }
  }, [isPlaying]);
  (0, import_react.useEffect)(function() {
    onScrubEnd();
  }, [isRepeat]);
  (0, import_react.useEffect)(function() {
    if (duration > 0) {
      var i;
      for (i = 0; i < audioRef.current.buffered.length; i++) {
        setBuffered(audioRef.current.buffered.end(audioRef.current.buffered.length - 1 - i) / duration * 100);
      }
    }
  }, [trackProgress]);
  (0, import_react.useEffect)(function() {
    audioRef.current.pause();
    setIsPlaying(false);
    setIsLoading(true);
    setBuffered(0);
    audioRef.current = new Audio(tracks[trackIndex]);
    setTrackProgress(audioRef.current.currentTime);
    audioRef.current.onloadeddata = function() {
      return setIsLoading(false);
    };
    if (isReady.current) {
      audioRef.current.play();
      setIsPlaying(true);
      startTimer();
    } else {
      isReady.current = true;
    }
  }, [trackIndex, forcePlayerUpdate]);
  (0, import_react.useEffect)(function() {
    return function() {
      audioRef.current.pause();
      clearInterval(intervalRef.current);
    };
  }, []);
  var Logger = function Logger2() {
    console.log({
      trackIndex,
      duration: ConvertTimeToText(duration),
      trackProgress: ConvertTimeToText(trackProgress),
      isPlaying,
      isRepeat,
      isShuffleList,
      isStopPlayMoreSong,
      volume,
      isLoading,
      isHaveError,
      speed
    });
  };
  var data = {
    Logger,
    isLoading,
    isHaveError,
    trackIndex,
    setTrackIndex,
    duration,
    durationText: ConvertTimeToText(audioRef.current.duration),
    trackProgress,
    trackProgressText: ConvertTimeToText(trackProgress),
    trackStyling,
    onScrub,
    onScrubEnd,
    isPlaying,
    setIsPlaying,
    play,
    pause,
    toNextTrack,
    toPrevTrack,
    isRepeat,
    repeat,
    volume,
    setVolume,
    isStopPlayMoreSong,
    StopPlayMoreSong,
    playShuffle,
    isShuffle: isShuffleList,
    playRandom,
    isMute,
    mute,
    unmute,
    buffered,
    bufferedText: buffered + "%",
    backward,
    forward,
    speed,
    playSlow,
    playNormal,
    playFast,
    forceUpdatePlayer,
    update
  };
  return children(_extends({}, data));
};
export {
  Reaplay
};
//# sourceMappingURL=reaplay.js.map
