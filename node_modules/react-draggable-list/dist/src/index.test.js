"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _pdelay = _interopRequireDefault(require("pdelay"));
var React = _interopRequireWildcard(require("react"));
var ReactDOM = _interopRequireWildcard(require("react-dom"));
var TestUtils = _interopRequireWildcard(require("react-dom/test-utils"));
var _src = _interopRequireDefault(require("../src"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jest-environment jsdom
 */ /* eslint-disable @typescript-eslint/no-use-before-define, @typescript-eslint/no-empty-function */
var TestTemplate = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(TestTemplate, _React$Component);
  function TestTemplate() {
    var _this;
    (0, _classCallCheck2["default"])(this, TestTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, TestTemplate, [].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_elRef", /*#__PURE__*/React.createRef());
    return _this;
  }
  (0, _createClass2["default"])(TestTemplate, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        item = _this$props.item,
        dragHandleProps = _this$props.dragHandleProps;
      return /*#__PURE__*/React.createElement("div", (0, _extends2["default"])({
        ref: this._elRef,
        className: "item"
      }, dragHandleProps), item.name);
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.props.item.name;
    }
  }, {
    key: "getDragHeight",
    value: function getDragHeight() {
      return 30;
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this._elRef.current;
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.item !== nextProps.item;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var el = this._elRef.current;
      Object.defineProperty(el, 'offsetHeight', {
        get: function get() {
          return 115;
        }
      });
    }
  }]);
  return TestTemplate;
}(React.Component);
var springConfig = {
  stiffness: 1500,
  damping: 50
};
test('drag works', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var _scrollTop, containerEl, list, commonProps, div, onMoveEnd, rootRef, render, root, renderedHandles, reorderedList;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        render = function _render() {
          ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
            ref: rootRef,
            itemKey: "name",
            list: list,
            template: TestTemplate,
            onMoveEnd: onMoveEnd,
            springConfig: springConfig,
            container: function container() {
              return containerEl;
            },
            commonProps: commonProps
          }), div);
        };
        _scrollTop = 0;
        containerEl = {
          get scrollTop() {
            return _scrollTop;
          },
          set scrollTop(x) {
            _scrollTop = x;
          }
        };
        list = [{
          name: 'caboose'
        }, {
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        commonProps = {
          a: 'foo'
        };
        div = document.createElement('div');
        onMoveEnd = jest.fn(function (newList) {
          list = newList;
          render();
        });
        rootRef = /*#__PURE__*/React.createRef();
        render();
        root = rootRef.current;
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(list);
        expect(root.getItemInstance('grif').getName()).toBe('grif');
        expect(root.getItemInstance('grif').getDragHeight()).toBe(30);
        expect(root.getItemInstance('grif').props.commonProps).toBe(commonProps);
        renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
        expect(root.state.dragging).toBe(false);
        renderedHandles[0].props.dragHandleProps.onMouseDown({
          pageY: 500,
          preventDefault: function preventDefault() {}
        });
        expect(root.state.dragging).toBe(true);
        root._handleMouseMove({
          pageY: 600
        });
        _context.next = 21;
        return (0, _pdelay["default"])(30);
      case 21:
        root._handleMouseMove({
          pageY: 650
        });
        expect(root.state.dragging).toBe(true);
        expect(onMoveEnd).toHaveBeenCalledTimes(0);
        root._handleMouseUp();
        expect(root.state.dragging).toBe(false);
        expect(onMoveEnd).toHaveBeenCalledTimes(1);
        reorderedList = [{
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'caboose'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        expect(onMoveEnd.mock.calls[0]).toEqual([reorderedList, {
          name: 'caboose'
        }, 0, 4]);
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(reorderedList);
        expect(_scrollTop).toBe(0);
        _context.next = 33;
        return (0, _pdelay["default"])(30);
      case 33:
        expect(_scrollTop).toBeGreaterThan(20);
      case 34:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));
test('two drags work', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
  var _scrollTop, containerEl, list, div, onMoveEnd, rootRef, render, root, renderedHandles, reorderedList, reorderedList2;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        render = function _render2() {
          ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
            ref: rootRef,
            itemKey: "name",
            list: list,
            onMoveEnd: onMoveEnd,
            template: TestTemplate,
            springConfig: springConfig,
            container: function container() {
              return containerEl;
            }
          }), div);
        };
        _scrollTop = 0;
        containerEl = {
          get scrollTop() {
            return _scrollTop;
          },
          set scrollTop(x) {
            _scrollTop = x;
          }
        };
        list = [{
          name: 'caboose'
        }, {
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        div = document.createElement('div');
        onMoveEnd = jest.fn(function (newList) {
          list = newList;
          render();
        });
        rootRef = /*#__PURE__*/React.createRef();
        render();
        root = rootRef.current;
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(list);
        renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
        expect(root.state.dragging).toBe(false);
        renderedHandles[0].props.dragHandleProps.onMouseDown({
          pageY: 500,
          preventDefault: function preventDefault() {}
        });
        expect(root.state.dragging).toBe(true);
        root._handleMouseMove({
          pageY: 600
        });
        _context2.next = 17;
        return (0, _pdelay["default"])(30);
      case 17:
        expect(root.state.dragging).toBe(true);
        expect(onMoveEnd).toHaveBeenCalledTimes(0);
        root._handleMouseUp();
        expect(root.state.dragging).toBe(false);
        expect(onMoveEnd).toHaveBeenCalledTimes(1);
        reorderedList = [{
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'caboose'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        expect(onMoveEnd.mock.calls[0]).toEqual([reorderedList, {
          name: 'caboose'
        }, 0, 2]);
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(reorderedList);
        expect(root.state.dragging).toBe(false);
        renderedHandles[0].props.dragHandleProps.onMouseDown({
          pageY: 600,
          preventDefault: function preventDefault() {}
        });
        expect(root.state.dragging).toBe(true);
        root._handleMouseMove({
          pageY: 650
        });
        expect(root.state.dragging).toBe(true);
        expect(onMoveEnd).toHaveBeenCalledTimes(1);
        root._handleMouseUp();
        expect(root.state.dragging).toBe(false);
        expect(onMoveEnd).toHaveBeenCalledTimes(2);
        reorderedList2 = [{
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'caboose'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        expect(onMoveEnd.mock.calls[1]).toEqual([reorderedList2, {
          name: 'caboose'
        }, 2, 3]);
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(reorderedList2);
        expect(_scrollTop).toBe(0);
        _context2.next = 40;
        return (0, _pdelay["default"])(30);
      case 40:
        expect(_scrollTop).toBeGreaterThan(20);
      case 41:
      case "end":
        return _context2.stop();
    }
  }, _callee2);
})));
test('props reordered during drag works', function () {
  var list = [{
    name: 'caboose'
  }, {
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif'
  }, {
    name: 'donut'
  }];
  var div = document.createElement('div');
  var onMoveEnd = jest.fn(function (newList) {
    list = newList;
    render();
  });
  var rootRef = /*#__PURE__*/React.createRef();
  function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
      ref: rootRef,
      itemKey: "name",
      list: list,
      template: TestTemplate,
      onMoveEnd: onMoveEnd,
      springConfig: springConfig
    }), div);
  }
  render();
  var root = rootRef.current;
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(list);
  var renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
  renderedHandles[0].props.dragHandleProps.onMouseDown({
    pageY: 500,
    preventDefault: function preventDefault() {}
  });
  list = [{
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif'
  }, {
    name: 'caboose',
    extra: 1
  }, {
    name: 'donut'
  }];
  render();
  root._handleMouseMove({
    pageY: 450
  });
  expect(root.state.dragging).toBe(true);
  expect(onMoveEnd).toHaveBeenCalledTimes(0);
  root._handleMouseUp();
  expect(root.state.dragging).toBe(false);
  expect(onMoveEnd).toHaveBeenCalledTimes(1);
  var reorderedList = [{
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'caboose',
    extra: 1
  }, {
    name: 'grif'
  }, {
    name: 'donut'
  }];
  expect(onMoveEnd.mock.calls[0]).toEqual([reorderedList, {
    name: 'caboose',
    extra: 1
  }, 5, 4]);
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(reorderedList);
});
test('item removed during drag works', function () {
  var list = [{
    name: 'caboose'
  }, {
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif'
  }, {
    name: 'donut'
  }];
  var div = document.createElement('div');
  var onMoveEnd = jest.fn(function (newList) {
    list = newList;
    render();
  });
  var rootRef = /*#__PURE__*/React.createRef();
  function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
      ref: rootRef,
      itemKey: "name",
      list: list,
      template: TestTemplate,
      onMoveEnd: onMoveEnd,
      springConfig: springConfig
    }), div);
  }
  render();
  var root = rootRef.current;
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(list);
  var renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
  renderedHandles[0].props.dragHandleProps.onMouseDown({
    pageY: 500,
    preventDefault: function preventDefault() {}
  });
  list = [{
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif',
    extra: 2
  }, {
    name: 'donut'
  }];
  render();
  root._handleMouseMove({
    pageY: 650
  });
  var reorderedList = [{
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif',
    extra: 2
  }, {
    name: 'donut'
  }];
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(reorderedList);
  expect(root.state.dragging).toBe(false);
  expect(onMoveEnd).toHaveBeenCalledTimes(0);
  root._handleMouseUp();
  expect(root.state.dragging).toBe(false);
  expect(onMoveEnd).toHaveBeenCalledTimes(0);
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(reorderedList);
});
test('item removed before drag end works', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
  var list, div, onMoveEnd, rootRef, render, root, renderedHandles, reorderedList;
  return _regenerator["default"].wrap(function _callee3$(_context3) {
    while (1) switch (_context3.prev = _context3.next) {
      case 0:
        render = function _render3() {
          ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
            ref: rootRef,
            itemKey: "name",
            list: list,
            template: TestTemplate,
            onMoveEnd: onMoveEnd,
            springConfig: springConfig
          }), div);
        };
        list = [{
          name: 'caboose'
        }, {
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        div = document.createElement('div');
        onMoveEnd = jest.fn(function (newList) {
          list = newList;
          render();
        });
        rootRef = /*#__PURE__*/React.createRef();
        render();
        root = rootRef.current;
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(list);
        renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
        renderedHandles[0].props.dragHandleProps.onMouseDown({
          pageY: 500,
          preventDefault: function preventDefault() {}
        });
        root._handleMouseMove({
          pageY: 650
        });
        _context3.next = 13;
        return (0, _pdelay["default"])(100);
      case 13:
        // eslint-disable-next-line require-atomic-updates
        list = [{
          name: 'caboose',
          extra: 3
        }, {
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif',
          extra: 2
        }];
        render();
        expect(root.state.dragging).toBe(true);
        expect(onMoveEnd).toHaveBeenCalledTimes(0);
        root._handleMouseUp();
        expect(root.state.dragging).toBe(false);
        expect(onMoveEnd).toHaveBeenCalledTimes(1);
        reorderedList = [{
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'caboose',
          extra: 3
        }, {
          name: 'grif',
          extra: 2
        }];
        expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
          return e.props.item;
        })).toEqual(reorderedList);
      case 22:
      case "end":
        return _context3.stop();
    }
  }, _callee3);
})));
test('dragged item removed after drag during animation works', function () {
  var list = [{
    name: 'caboose'
  }, {
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif'
  }, {
    name: 'donut'
  }];
  var div = document.createElement('div');
  var onMoveEnd = jest.fn(function (newList) {
    list = newList;
    render();
  });
  var rootRef = /*#__PURE__*/React.createRef();
  function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
      ref: rootRef,
      itemKey: "name",
      list: list,
      template: TestTemplate,
      onMoveEnd: onMoveEnd,
      springConfig: springConfig
    }), div);
  }
  render();
  var root = rootRef.current;
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(list);
  var renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
  renderedHandles[0].props.dragHandleProps.onMouseDown({
    pageY: 500,
    preventDefault: function preventDefault() {}
  });
  root._handleMouseMove({
    pageY: 650
  });
  expect(root.state.dragging).toBe(true);
  expect(onMoveEnd).toHaveBeenCalledTimes(0);
  root._handleMouseUp();
  expect(root.state.dragging).toBe(false);
  expect(onMoveEnd).toHaveBeenCalledTimes(1);
  var listMinusOne = [{
    name: 'tucker'
  }, {
    name: 'church'
  }, {
    name: 'simmons'
  }, {
    name: 'sarge'
  }, {
    name: 'grif'
  }, {
    name: 'donut'
  }];
  list = listMinusOne;
  render();
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(listMinusOne);
});
test('list is shown with correct positions after being fully changed during animation', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
  var list, div, onMoveEnd, rootRef, render, root, renderedHandles;
  return _regenerator["default"].wrap(function _callee4$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        render = function _render4() {
          ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
            ref: rootRef,
            itemKey: "name",
            list: list,
            template: TestTemplate,
            onMoveEnd: onMoveEnd,
            springConfig: springConfig
          }), div);
        };
        list = [{
          name: 'caboose'
        }, {
          name: 'tucker'
        }, {
          name: 'church'
        }, {
          name: 'simmons'
        }, {
          name: 'sarge'
        }, {
          name: 'grif'
        }, {
          name: 'donut'
        }];
        div = document.createElement('div');
        onMoveEnd = jest.fn(function (newList) {
          list = newList;
          render();
        });
        rootRef = /*#__PURE__*/React.createRef();
        render();
        root = rootRef.current;
        renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
        renderedHandles[0].props.dragHandleProps.onMouseDown({
          pageY: 500,
          preventDefault: function preventDefault() {}
        });
        _context4.next = 11;
        return (0, _pdelay["default"])(100);
      case 11:
        root._handleMouseUp();
        _context4.next = 14;
        return (0, _pdelay["default"])(1);
      case 14:
        expect(root.getItemInstance('caboose').getDOMNode().parentElement.style.position).toBe('absolute');
        list = [{
          name: 'lopez'
        }, {
          name: "o'malley"
        }];
        render();
      case 17:
        if (!(root.getItemInstance('lopez').getDOMNode().parentElement.style.position === 'absolute')) {
          _context4.next = 22;
          break;
        }
        _context4.next = 20;
        return (0, _pdelay["default"])(10);
      case 20:
        _context4.next = 17;
        break;
      case 22:
        expect(root.getItemInstance('lopez').getDOMNode().parentElement.style.position).toBe('relative');
      case 23:
      case "end":
        return _context4.stop();
    }
  }, _callee4);
})));
test('updating commonProps works', function () {
  var list = [{
    name: 'caboose'
  }, {
    name: 'donut'
  }];
  var commonProps = {
    a: 5
  };
  var div = document.createElement('div');
  var onMoveEnd = jest.fn(function (newList) {
    list = newList;
    render();
  });
  var rootRef = /*#__PURE__*/React.createRef();
  function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
      ref: rootRef,
      itemKey: "name",
      list: list,
      template: TestTemplate,
      onMoveEnd: onMoveEnd,
      springConfig: springConfig,
      commonProps: commonProps
    }), div);
  }
  render();
  var root = rootRef.current;
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.item;
  })).toEqual(list);
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.commonProps;
  })).toEqual(list.map(function () {
    return {
      a: 5
    };
  }));
  commonProps = {
    b: 6
  };
  render();
  expect(TestUtils.scryRenderedComponentsWithType(root, TestTemplate).map(function (e) {
    return e.props.commonProps;
  })).toEqual(list.map(function () {
    return {
      b: 6
    };
  }));
});
test('onDragEnd and onDragStart callbacks are correctly called', function () {
  var _scrollTop = 0;
  var containerEl = {
    get scrollTop() {
      return _scrollTop;
    },
    set scrollTop(x) {
      _scrollTop = x;
    }
  };
  var list = [{
    name: 'alice'
  }, {
    name: 'bob'
  }, {
    name: 'charlie'
  }, {
    name: 'deb'
  }, {
    name: 'ethan'
  }];
  var div = document.createElement('div');
  var onMoveEnd = jest.fn(function (newList) {
    list = newList;
    render();
  });
  var onDragStart = jest.fn(function () {});
  var onDragEnd = jest.fn(function () {});
  var rootRef = /*#__PURE__*/React.createRef();
  function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(_src["default"], {
      ref: rootRef,
      itemKey: "name",
      list: list,
      template: TestTemplate,
      onMoveEnd: onMoveEnd,
      springConfig: springConfig,
      container: function container() {
        return containerEl;
      },
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }), div);
  }
  render();
  var root = rootRef.current;
  var renderedHandles = TestUtils.scryRenderedComponentsWithType(root, TestTemplate);
  expect(onDragStart).toHaveBeenCalledTimes(0);
  renderedHandles[0].props.dragHandleProps.onMouseDown({
    pageY: 500,
    preventDefault: function preventDefault() {}
  });
  expect(onDragStart).toHaveBeenCalledTimes(1);
  expect(onDragStart).toHaveBeenLastCalledWith({
    name: 'alice'
  });
  expect(onDragEnd).toHaveBeenCalledTimes(0);
  root._handleMouseMove({
    pageY: 600
  });
  root._handleMouseUp();
  expect(onDragEnd).toHaveBeenCalledTimes(1);
  expect(onDragEnd).toHaveBeenLastCalledWith({
    name: 'alice'
  });
});
//# sourceMappingURL=index.test.js.map